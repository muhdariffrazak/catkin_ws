// Generated by gencpp from file panthera_lights/LightStatus.msg
// DO NOT EDIT!


#ifndef PANTHERA_LIGHTS_MESSAGE_LIGHTSTATUS_H
#define PANTHERA_LIGHTS_MESSAGE_LIGHTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panthera_lights
{
template <class ContainerAllocator>
struct LightStatus_
{
  typedef LightStatus_<ContainerAllocator> Type;

  LightStatus_()
    : Brake(0)
    , HazardLight(0)
    , SignalRight(0)
    , SignalLeft(0)
    , Autonomous(0)
    , TeleOp(0)
    , Beacon(0)
    , Night(0)
    , Day(0)  {
    }
  LightStatus_(const ContainerAllocator& _alloc)
    : Brake(0)
    , HazardLight(0)
    , SignalRight(0)
    , SignalLeft(0)
    , Autonomous(0)
    , TeleOp(0)
    , Beacon(0)
    , Night(0)
    , Day(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Brake_type;
  _Brake_type Brake;

   typedef uint8_t _HazardLight_type;
  _HazardLight_type HazardLight;

   typedef uint8_t _SignalRight_type;
  _SignalRight_type SignalRight;

   typedef uint8_t _SignalLeft_type;
  _SignalLeft_type SignalLeft;

   typedef uint8_t _Autonomous_type;
  _Autonomous_type Autonomous;

   typedef uint8_t _TeleOp_type;
  _TeleOp_type TeleOp;

   typedef uint8_t _Beacon_type;
  _Beacon_type Beacon;

   typedef uint8_t _Night_type;
  _Night_type Night;

   typedef uint8_t _Day_type;
  _Day_type Day;





  typedef boost::shared_ptr< ::panthera_lights::LightStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panthera_lights::LightStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LightStatus_

typedef ::panthera_lights::LightStatus_<std::allocator<void> > LightStatus;

typedef boost::shared_ptr< ::panthera_lights::LightStatus > LightStatusPtr;
typedef boost::shared_ptr< ::panthera_lights::LightStatus const> LightStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panthera_lights::LightStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panthera_lights::LightStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panthera_lights::LightStatus_<ContainerAllocator1> & lhs, const ::panthera_lights::LightStatus_<ContainerAllocator2> & rhs)
{
  return lhs.Brake == rhs.Brake &&
    lhs.HazardLight == rhs.HazardLight &&
    lhs.SignalRight == rhs.SignalRight &&
    lhs.SignalLeft == rhs.SignalLeft &&
    lhs.Autonomous == rhs.Autonomous &&
    lhs.TeleOp == rhs.TeleOp &&
    lhs.Beacon == rhs.Beacon &&
    lhs.Night == rhs.Night &&
    lhs.Day == rhs.Day;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panthera_lights::LightStatus_<ContainerAllocator1> & lhs, const ::panthera_lights::LightStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panthera_lights

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panthera_lights::LightStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_lights::LightStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panthera_lights::LightStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panthera_lights::LightStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_lights::LightStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_lights::LightStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panthera_lights::LightStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e88e78a8e709ed3fa5e5e18d48c62d5d";
  }

  static const char* value(const ::panthera_lights::LightStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe88e78a8e709ed3fULL;
  static const uint64_t static_value2 = 0xa5e5e18d48c62d5dULL;
};

template<class ContainerAllocator>
struct DataType< ::panthera_lights::LightStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panthera_lights/LightStatus";
  }

  static const char* value(const ::panthera_lights::LightStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panthera_lights::LightStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Brake\n"
"uint8 HazardLight\n"
"uint8 SignalRight\n"
"uint8 SignalLeft\n"
"uint8 Autonomous\n"
"uint8 TeleOp\n"
"uint8 Beacon\n"
"uint8 Night\n"
"uint8 Day\n"
;
  }

  static const char* value(const ::panthera_lights::LightStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panthera_lights::LightStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Brake);
      stream.next(m.HazardLight);
      stream.next(m.SignalRight);
      stream.next(m.SignalLeft);
      stream.next(m.Autonomous);
      stream.next(m.TeleOp);
      stream.next(m.Beacon);
      stream.next(m.Night);
      stream.next(m.Day);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panthera_lights::LightStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panthera_lights::LightStatus_<ContainerAllocator>& v)
  {
    s << indent << "Brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Brake);
    s << indent << "HazardLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HazardLight);
    s << indent << "SignalRight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SignalRight);
    s << indent << "SignalLeft: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SignalLeft);
    s << indent << "Autonomous: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Autonomous);
    s << indent << "TeleOp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TeleOp);
    s << indent << "Beacon: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Beacon);
    s << indent << "Night: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Night);
    s << indent << "Day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Day);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHERA_LIGHTS_MESSAGE_LIGHTSTATUS_H
